{"componentChunkName":"component---src-templates-blog-post-template-blog-post-template-js","path":"/posts/TIL/equality-comparison/","webpackCompilationHash":"fee651a994bd3539af1e","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dwnyh.github.io","title":"Dwny Blog","author":{"name":"Dawoon Hwang"}}},"markdownRemark":{"id":"3dafcff1-7b36-5cf8-b562-c95f6a3c5a53","excerpt":"실제 코드에서는 주로 정확한 비교를 위해(타입비교까지) === 비교만 사용하지 == 비교는 잘 사용하지 않았고, ==는 값만 비교한다는 사실은 알았지만 강제변환을 통해 값만 비교한다는 사실은 알지 못했다. 실제로 잘 쓰는 일은 많이 없을 것 같지만 You don’t know JS…","html":"<p>실제 코드에서는 주로 정확한 비교를 위해(타입비교까지) === 비교만 사용하지 == 비교는 잘 사용하지 않았고, ==는 값만 비교한다는 사실은 알았지만 강제변환을 통해 값만 비교한다는 사실은 알지 못했다. 실제로 잘 쓰는 일은 많이 없을 것 같지만 <strong>You don’t know JS 4장 강제변환</strong> 뒷부분에 여러 타입별로 추상화 동등비교(’==‘)하는 예제가 있는데 규칙에 따라 맞춰보는 과정이 꽤 흥미로웠어서 읽어본 김에 한번 정리해보려고 한다.</p>\n<p><strong>1) 문자열과 숫자를 비교하면 문자열은 숫자로 강제변환 된다.</strong> </p>\n<p><strong>2) 불리언과 다른 타입을 비교하면 둘다 숫자로 강제변환 된다.</strong><br>\n=> <code class=\"language-text\">&quot;42&quot; == true</code>를 하게 되면 “42”값이 truthy인 것과 관련없이 숫자 42로 변환되고 우측 true도 숫자 1로 강제변환된다.</p>\n<p><strong>3) null과 undefined를 비교하면 서로에게 타입을 맞춘다.</strong><br>\n=> <code class=\"language-text\">a === undefined ||  a === null</code>보다 <code class=\"language-text\">a == null</code>하면 더 깔끔하게 작성할 수 있다.</p>\n<p><strong>4) 객체와 비객체를 비교하면 객체값이 ToPrimitive 강제변환 된다.</strong><br>\n=> 원시값으로 변환 : <code class=\"language-text\">valueOf</code>로 했을 때 원시값으로 나오면 그 원시값으로 하고, 아닐 경우 <code class=\"language-text\">toString</code>으로 변환됨.</p>\n<p><strong>5) ’>‘와 ’&#x3C;’ 비교일 경우, 두 피연산자에대해 ToPrimitive 강제변환을 실시한다.</strong><br>\n=> 1. 한쪽이라도 문자열값이면 각 문자를 알파벳순으로 비교한다.<br>\n=> 2. 한쪽이라도 문자열값이 아닌 경우에는 양쪽 모두 ToNumber로 강제변환한다.</p>","frontmatter":{"title":"자바스크립트에서의 비교('==', '>')","date":"November 16, 2019","description":"자바스크립트에서 서로 다른 타입끼리 == 비교를 한다면?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"posts/TIL/equality-comparison/","previous":{"frontmatter":{"category":"TIL","title":"빈객체와 빈배열을 더한다면?","template":"posts"},"fields":{"slug":"posts/TIL/array-plus-object/"}},"next":{"frontmatter":{"category":"TIL","title":"Optional Chaining","template":"posts"},"fields":{"slug":"posts/TIL/guard-operator/"}}}}}