{"componentChunkName":"component---src-templates-blog-post-template-blog-post-template-js","path":"/posts/TIL/array-plus-object/","webpackCompilationHash":"4540d67a9e3076c59c5c","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dwnyh.github.io","title":"Dwny Blog","author":{"name":"Dawoon Hwang"}}},"markdownRemark":{"id":"5f04c4e5-2af9-57ed-b63b-49d6e7d3368b","excerpt":"you don’t know JS 강제변환 파트에 다음과 같은 부분이 있다. 잘 알려진 강제변환 함정이 있다. [] + {} 대 {} + []. 연산 결과는 각각 ”object Object“와 0이다…","html":"<p>you don’t know JS 강제변환 파트에 다음과 같은 부분이 있다.</p>\n<p><strong>잘 알려진 강제변환 함정이 있다. [] + {} 대 {} + []. 연산 결과는 각각 ”[object Object]“와 0이다</strong></p>\n<p>4장쯤 읽으니 부연설명 없는 이러한 구문들에 대한 답답함이 찾는 즐거움으로 변하였다. 유명한 책이라 그런지 웬만한 내용은 스택오버플로우에 누군가가 질문을 달아놓았고, 답변도 풍부하다.</p>\n<p><strong>{} + []</strong>는 왜 답이 0이 될까? <a href=\"https://stackoverflow.com/questions/11939044/why-does-return-0-in-javascript\">스택오버플로우</a>에 따르면, 자바스크립트 구문이 <code class=\"language-text\">{</code>로 시작하게 되면 객체리터럴이 아니라 block구문으로 본다고 한다. 그래서 앞의 <code class=\"language-text\">{}</code> 부분은 빈 코드블락으로 해석되게 되는 것이다. 빈 코드블락 뒤에 <code class=\"language-text\">+[]</code>부분이 남았는데 여기서 <code class=\"language-text\">+</code>는 <code class=\"language-text\">단항연산자</code>(피연산자가 하나뿐인 연산자)로 처리되므로 피연산자를 숫자로 강제변환하게 된다.</p>\n<p>값을 숫자로 변환시키는 규칙에는 1) <code class=\"language-text\">valueOf()</code>를 쓸 수 있고 반환 값이 원시값이면 그대로 강제변환을 하고, 2) 그렇지 않을 경우에는 <code class=\"language-text\">toString()</code>을 이용해 강제변환을 하게 된다. 따라서 빈 배열과 같은 경우는 <code class=\"language-text\">toString()</code>이 적용되어 빈 문자열로 변환이 되며, 빈문자열은 falsy값이므로 0으로 변환되게 된다. 따라서 <code class=\"language-text\">{} + [] = 0</code>이 되게 되는 것이다.</p>\n<p>반면에 <strong>[] + {} = [object Object]</strong>이다. <code class=\"language-text\">+ 알고리즘(피연산자가 객체일 경우)</code>에 따르면 <strong>한쪽 피연산자가 문자열이거나 문자열 표현형으로 나타낼 수 있으면 문자열 붙이기</strong>를 한다. 빈배열의 경우는 valueOf를 하면 빈 문자열이기 때문에 문자열 붙이기가 들어가고, 오른쪽 피연산자인 객체를 문자열화시키면 [object Object]이기 때문에 결과가 위와 같은 것이다.</p>","frontmatter":{"title":"빈객체와 빈배열을 더한다면?","date":"November 15, 2019","description":"{} + []와 [] + {}는 다르다"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"posts/TIL/array-plus-object/","previous":{"frontmatter":{"category":"TIL","title":"You Don't Know JS에 소개된 JSON.stringify()","template":"posts"},"fields":{"slug":"posts/TIL/json-stringify/"}},"next":{"frontmatter":{"category":"TIL","title":"자바스크립트에서의 비교('==', '>')","template":"posts"},"fields":{"slug":"posts/TIL/equality-comparison/"}}}}}