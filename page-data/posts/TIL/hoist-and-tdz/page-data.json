{"componentChunkName":"component---src-templates-blog-post-template-blog-post-template-js","path":"/posts/TIL/hoist-and-tdz/","webpackCompilationHash":"bbde8a3b6a4b8bc06709","result":{"data":{"site":{"siteMetadata":{"title":"Dwny Blog","author":{"name":"Dawoon Hwang"}}},"markdownRemark":{"id":"1cc6bde5-733a-5b8c-8c6c-393a36eb40de","excerpt":"자바스크립트의 호이스팅(Hoisting…","html":"<p>자바스크립트의 호이스팅(Hoisting)의 어원 <code class=\"language-text\">hoist</code>의 뜻을 찾아보면 다음과 같다.<br>\n<strong>“소형의 감아올리는 장치. 공장 내의 재료 운반·조립에 사용하며, 들보 위에서 이동시킴. 구동 방식에 따라 공기 호이스트·전기 호이스트 등으로 나누어짐.”</strong></p>\n<p>구글 이미지를 검색해보면 작은 도르래 같이 보이는 것들이 많이 보이는데, 위의 정의와 같이 운반시에 끌어올리는 역할을 한다고 한다. 따라서 이 어원에서 비롯된 자바스크립트에서 쓰이는 호이스트의 개념 역시, 변수 또는 함수가 정의된 후 그 선언이 끌어올려짐을 의미한다. <code class=\"language-text\">var</code>과 같은 변수 선언문이나 <code class=\"language-text\">function(){}</code>과 같이 함수표현식으로 작성된 함수의 선언이 스코프 내의 상위로 끌어올려져서 이로 정의된 변수나 함수가 선언 전에 호출이 되어도 실행이 가능한 것이다.</p>\n<p>이와 더불어 <code class=\"language-text\">TDZ</code> 개념도 함께 설명할 수 있는데, <code class=\"language-text\">var</code>로 정의된 변수는 선언하면 호이스팅과 동시에 <code class=\"language-text\">undefined</code> 값으로 초기화 되는 반면, <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>는 호이스팅은 가능해서 위로 끌어올려지지만 초기값이 할당되지 않기 때문에 할당되기 전에 선언된 변수를 사용하게 되면 <code class=\"language-text\">Reference Error</code>가 발생하게 된다. 따라서 끌어올려졌지만 변수에 값이 할당되기 전까지는 사용이 불가하므로 이 구역을 <code class=\"language-text\">TDZ(Temporal Dead Zone)</code>이라고 일컫는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token constant\">TDZ</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I like </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>favoriteFruit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reference Error!</span>\n  <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n  <span class=\"token keyword\">let</span> favoriteFruit <span class=\"token operator\">=</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기까지가 원래 내가 알고 있던 내용이었는데, You Don’t Know JS 책을 읽던 도중 호이스팅 개념이 나와서 확인차 <a href=\"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\">mdn 문서</a>를 한번 확인하였는데 새로운 사실을 알게되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">호이스팅을 변수 및 함수 선언이 물리적으로 작성한 코드의 상단으로 옮겨지는 것으로 가르치지만  \n실제로는 그렇지 않습니다. 변수 및 함수 선언은 컴파일 단계에서 메모리에 저장되지만, 코드에서 입력한 \n위치와 정확히 일치한 곳에 있습니다.</code></pre></div>\n<p>위에 내가 작성했던 예제와 같이 나 역시 호이스팅은 물리적으로 위로 끌어올려지는 개념이며, 그래서 TDZ라는 구역이 물리적으로 할당이 되는 것이라고 생각했는데, 그게 아니었다! 컴파일단계에서 선언이 저장되는 것이고 런타임에서 할당부분이 일어나기 전까지 TDZ가 형성되는 것이므로 오히려 물리적이라기보다 시점의 차이라고 볼 수 있는 것이다. 흥미롭당..🧐</p>","frontmatter":{"title":"호이스팅과 TDZ","date":"November 22, 2019","description":"호이스팅은 도르래처럼 위로 끌어올려지는것?!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"posts/TIL/hoist-and-tdz/","previous":{"frontmatter":{"category":"TIL","title":"Optional Chaining","template":"posts"},"fields":{"slug":"posts/TIL/guard-operator/"}},"next":{"frontmatter":{"category":null,"title":"About Dawoon","template":"pages"},"fields":{"slug":"/aboutMe/"}}}}}